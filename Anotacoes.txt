1 - Bootstrap
 - No nest js se trata de um facilitador parecido com o principio do bootstrap do frontend que e facilitar a construcao de um projeto
 - A funcao bootstrap inicial e responsavel de iniciar e carregar o modulo principal
 - Localizada no arquivo de main.ts
 - O nome da funcao e bootstrap pode ser nomeada com outro nome mas o padrao e deixar o bootstrap
 - Essa funcao e onde a variavel de app sera configurada e instanciada setando assim o modulo principal e a porta que estara rodando
 - Resumindo essa funcao e responsavel pelas configuracoes inicias de todo o projeto

2- Decorators
 - Servem para modificar uma classe, objeto ou uma funcao em tempo de execucao;
 - Definidos sempre com @NomeDecorator
 - O Decorator vem sempre antes da funcao ou classe ou objeto alvo da mudanca
 - Os Decorators podem ser encadeados ou sem um em cima do outro
 - Todo decorator e uma funcao

3- Module
 - Conceito de Module inspirado no module do angular 2+
 - A ideia do Module e a divisao da aplicacao em secoes separadas para cada funcionalidade
 - Dentro do module contem os imports de outros modulos, controllers e services.
 - O Module funciona como um agrupador de recursos e podem ser exportatos

4- Controllers
 - O Controller funciona como um garcom em um restaurante, ou seja o controller e responsavel em atender e gerenciar as solicitacoes do client
 - Nao e uma boa pratica colocar todas as funcionalidades dentro do controller, o correto e somente fazer o redirecionamento da solicitacao
 - Dentro do decorator do controller e aonde ele indica a qual rota ele pertence ou serja @Controller('usuarios') logo todas as rotas dentro deste controller recebem o prefixo de /usuarios

5- Services
 - O padrao do uso do services e ser chamado por uma rota definida em um controller
 - Diferente do controller o service tem a funcao semelhante a de um cozinheiro em um restaurante, ou seja fica responsavel em preparar os dados e solicitacoes por exemplo regras de negocio, acesso ao banco de dados, etc...
 - Utiliza o decorator @Injectable que deixa o service apto a ser injetado no controller, ele e injetado por padrao no constructor do controller da seguinte maneira 'private readonly meuService: MeuService'
 - ao ser injetado o service possibilita a chamar as funcoes dentro dos metodos do controller utilizando 'this.meuService.minhaFuncao()'

-------------------------- API CRUD Rest
 - Ao Criar um novo module e consequentemente um controller e preciso importar o mesmo no app.module

1- Create
 - Utiliza o decorator @Post() para definir que a rota sera um post (Create)
 - Utiliza o @Body como parametro da funcao para pegar os dados enviados da request '@Body body'

2- Read
 - Utiliza o decorator @Get() para definir que a rota sera um get (Read)
 - Quando o get e utilizado para buscar apenas um registro utilizase o :id dentro do decoretor de get @Get(':id') e para pegar esse id basta utilizar o decorator @Param() para pegar todos os parametros da rota

3- Update
 - Utiliza o decorator @Put() ou @Patch() para definir que a rota sera um put ou patch respectivamente (Update)
 - Assim como o post pega os dados do body utilizando o mesmo decorator @Body()
 - Put atualiza todos os dados do modelo mesmo aqueles que nao vierao no body da request
 - Patch atualiza somente as propiedades passadas dentro do body da request

4- Delete
 - Utiliza o decorator @Delete() para definir que a rota sera um delete (Delete)
 - recebe o identificador para deletar atravez da url utilizando assim o decorator @Param

--------------------------- DTO - (DATA TRANSFER OBJECT)
 - E um padrao de projeto usado para transferir dados em uma aplicacao de um ambiente para outro
 - Utilizar um DTO fica simples a validacao dos dados e transformacoes antes de inserirmos no banco de dados
 - Para fazer a validacao podemos utilizar a biblioteca class-validator
 - Para Alterar os dados podemos utilizar a biblioteca class-transformer
 - E preciso inicializar as bibliotecas na funcao bootstrap

 --------------------------- Banco De Dados com Prisma no nestJs
  - ORM faz a camada de conexao da aplicacao entre as classes e objetos com o banco de Dados da aplicacao
  - Para instalar o prisma para usar o npm i -D prisma, ele sera instalado como dependencia de desenvolvimento
  - Para iniciar a aplicacao com prisma devemos utilizar o comando npx prisma init para criar um banco de dados do zero

----------------------------- Connceitos fundamentais 2
1- Pipes
 - Sao classes com decorators @injectable()
 - Deve implementar a interface PipeTransform
 - Pipes normalmente sao usados para transformar ou validar dados passados por ele
 1.2 - Built-in Pipes
   - Pipes que ja estao na aplicacao nest por padrao
   - ValidationPipe, ParsesPipe, DefaultValuePipe, ParseFilePipe

2- Interceptors
 - Sao classes com o decorator @Injectable()
 - Deve implementar a interface NestInterceptor
 - Utiliza a tecnica AOP (Aspect Oriented Programing)
 - Essa tecnica possibilita adicionarmos alguma logica antes ou depois da execucao de metodos
 - Pode ser usado em um controller, em um metodo ou ate mesmo de forma global na aplicacao
 - Para utilizar usamos o decorator @UseInterceptors() ou o metodo useGlobalInterceptor no bootstrap da aplicacao
 
